model=model_errors[which(model_errors$SSE==min_sse),1]
#fit variogram using the best variogram model from earlier
v.fit=variofit(v,cov.model=toString(model),weights="cressie")
#plot results
plot(v)
lines(v.fit)
kcontrol=krige.control(cov.model=toString(model),cov.pars=c(v.fit$cov.pars[1], v.fit$cov.pars[2]))
#krig the results
Potassio_plot=krige.conv(g, loc=prd.loc, krige=kcontrol)
#save kriging results in a data frame
#specify column names
Potassio_plot=data.frame(cbind(Potassio_plot$predict, prd.loc[,1], prd.loc[,2]))
colnames(Potassio_plot)=c("K", "x", "y")
#convert to spatial data frame
coordinates(Potassio_plot)=~x+y
#convert to a raster
Potassio_plot=rasterFromXYZ(Potassio_plot)
#set projection
crs(Potassio_plot)= "+init=epsg:31984"
#plot raster
image(Potassio_plot, asp=1, xlab="Northing", ylab="Easting", main=" pH", legend.only = T)
image.plot( legend.only = T, breaks=sl, lab.breaks=sll)
#add contours
contour(Potassio_plot, add=T)
par(xpd=FALSE, bty="l")
pal <-colorRampPalette(c("red","yellow", "green"))
plot(Potassio_plot, main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)", cex=1.5, col= pal(10) )
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)")
plot(Potassio_plot, add=T, main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)", legend=T, cex=1.5, alpha=0.75)
grid(lty=1)
par(xpd=TRUE)
#add contours to the map
contour(Potassio_plot, add=T, col="white")
#Coordinates are columns 2 and 3 in the meuse.all data frame, and the cadmium concentrations are in
g=as.geodata(DADOS, coords.col=2:3, data.col=8)
#create a variogram from the geodata file
#we will use the modulus estimator and specify constant trend
#other trends include 1st or 2nd order polynomials
v=variog(g, estimator.type='modulus', trend='cte')
#plot and inspect the variogram
plot(v)
#Fit a variogram model to the variogram
#Instead of just one lets plot a few and pick the one with the lowest SSE value
#create variogram models
variog.wls.exp=variofit(v,cov.model="exponential",weights="cressie")
variog.wls.spherical=variofit(v,cov.model="spherical",weights="cressie")
variog.wls.cubic=variofit(v,cov.model="cubic",weights="cressie")
variog.wls.circular=variofit(v,cov.model="circular",weights="cressie")
#plot the variogram models on the variogram
plot(v)
lines(variog.wls.cubic)
#Automatically determine which model has lowest SSE
model_list=list(variog.wls.spherical$cov.model, variog.wls.exp$cov.model,variog.wls.cubic$cov.model,variog.wls.circular$cov.model)
sse_list=list(variog.wls.exp$value,variog.wls.spherical$value, variog.wls.cubic$value,variog.wls.circular$value)
model_errors=do.call(rbind,Map(data.frame,Mod=model_list,SSE=sse_list))
#select row with min sse
min_sse=min(model_errors$SSE)
model=model_errors[which(model_errors$SSE==min_sse),1]
#fit variogram using the best variogram model from earlier
v.fit=variofit(v,cov.model=toString(model),weights="cressie")
#plot results
plot(v)
lines(v.fit)
#specify variogram specifics for kriging
kcontrol=krige.control(cov.model=toString(model),cov.pars=c(v.fit$cov.pars[1], v.fit$cov.pars[2]))
#krig the results
Potassio_plot=krige.conv(g, loc=prd.loc, krige=kcontrol)
#save kriging results in a data frame
#specify column names
Potassio_plot=data.frame(cbind(Potassio_plot$predict, prd.loc[,1], prd.loc[,2]))
colnames(Potassio_plot)=c("K", "x", "y")
#convert to spatial data frame
coordinates(Potassio_plot)=~x+y
#convert to a raster
Potassio_plot=rasterFromXYZ(Potassio_plot)
#set projection
crs(Potassio_plot)= "+init=epsg:31984"
#plot raster
image(Potassio_plot, asp=1, xlab="Northing", ylab="Easting", main="Teores de Magnésio (cmolc/dm³)", legend.only = T)
image.plot( legend.only = T, breaks=sl, lab.breaks=sll)
#add contours
contour(Potassio_plot, add=T)
par(xpd=FALSE, bty="l")
pal <-colorRampPalette(c("red","yellow", "green"))
plot(Potassio_plot, main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)", cex=1.5, col= pal(10) )
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)")
plot(Potassio_plot, add=T, main="Teores de Magnésio (cmolc/dm³)",xlab="Easting (m)", ylab="Northing (m)", legend=T, cex=1.5, alpha=0.75)
grid(lty=1)
par(xpd=TRUE)
#add contours to the map
contour(Potassio_plot, add=T, col="white")
#create a shapefile
#raster to vector
write.csv(DADOS, file = "AAA.csv")
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=",")
View(dados_amostra)
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=",")
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=";")
# Criando o arquivo geodata #
goadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
library("geoR")
# Criando o arquivo geodata #
goadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Analise exploratoria dos dados #
summary(dados_amostra)
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Analise exploratoria dos dados #
summary(geoadata)
plot(s100)
plot(geoadata)
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=";")
limite_interp <- st_read("Talhao_Interpolacao.shp")
library("sf")
limite_interp <- st_read("Talhao_Interpolacao.shp")
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
# Carregando os pacotes utilizados #
library("geoR")
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Analise exploratoria dos dados #
summary(geoadata)
plot(geoadata)
#Criando o variograma empírico #
variog_empir=variog(g, estimator.type='modulus', trend='cte')
#Criando o variograma empírico #
variog_empir=variog(geoadata, estimator.type='modulus', trend='cte')
#Plotando o variograma empírico #
plot(variog_empir)
variog.wls.linear=variofit(variog_empir,cov.model="linear",weights="cressie")
variog.wls.exp=variofit(variog_empir,cov.model="exponential",weights="cressie")
variog.wls.spherical=variofit(variog_empir,cov.model="spherical",weights="cressie")
variog.wls.gaussian=variofit(variog_empir,cov.model="gaussian",weights="cressie")
variog.wls.cubic=variofit(variog_empir,cov.model="cubic",weights="cressie")
variog.wls.circular=variofit(variog_empir,cov.model="circular",weights="cressie")
#plot the variogram models on the variogram
plot(variog_empir)
lines(variog.wls.gaussian)
lista_modelos <-list(variog.wls.spherical$cov.model, variog.wls.linear$cov.model,variog.wls.gaussian$cov.model,
variog.wls.exp$cov.model,variog.wls.cubic$cov.model,variog.wls.circular$cov.model)
lista_sse <-list(variog.wls.exp$value,variog.wls.spherical$value,variog.wls.gaussian$value,variog.wls.linear$value,
variog.wls.cubic$value,variog.wls.circular$value)
model_errors <- do.call(rbind,Map(data.frame,Mod=model_list,SSE=sse_list))
model_errors <- do.call(rbind,Map(data.frame,Mod=lista_modelos,SSE=lista_sse))
min_sse <- min(model_errors$SSE)
min_sse
model <- model_errors[which(model_errors$SSE==min_sse),1]
model
lines(variog.wls.cubic)
View(model_errors)
model
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
#plot results
plot(variog_empir)
lines(variog_ajust)
valid_cruz <- xvalid(geoadata, model = wls)
valid_cruz <- xvalid(geoadata, model = variog_ajust)
valid_cruz
plot(valid_cruz)
variog_ajust$cov.pars[1]
variog_ajust$cov.pars[2]
# Criando pontos para krigagem #
grid_krig <- st_make_grid(limite_interp, cellsize = 1, what = "centers")
grid_krig <- st_intersection(grid_krig,limite_interp)
grid_krig[,1]
# Realizando a krigagem #
control_krig <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
Potassio_plot <- krige.conv(geoadata, loc=grid_krig, krige=control_krig)
# Salvando resultados da krigagem em um DF #
Potassio_plot <- data.frame(cbind(Potassio_plot$predict, grid_krig[,1], grid_krig[,2]))
grid_krig <- matrix(unlist(grid_krig),nrow=length(grid_krig), byrow = T)
kcontrol=krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
Potassio_plot=krige.conv(geoadata, loc=grid_krig, krige=kcontrol)
# Slvando resultados da krigagem em um DF #
Potassio_plot=data.frame(cbind(Potassio_plot$predict, grid_krig[,1], grid_krig[,2]))
# Realizando a krigagem #
krig_control=krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
# Realizando a krigagem #
krig_control <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
krig_control <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
pH_plot <- krige.conv(geoadata, loc=grid_krig, krige=krig_control)
# Salvando resultados da krigagem em um DF #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
# Salvando resultados da krigagem em um DF #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
View(pH_plot)
#Plotando os modelos no variograma #
plot(variog_empir)
#Ajustando o variograma com menor SSE #
valid_cruz <- xvalid(geoadata, model = variog_ajust)
plot(valid_cruz)
# Salvando resultados da krigagem em um DF #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
# Criando pontos para krigagem #
grid_krig <- st_make_grid(limite_interp, cellsize = 1, what = "centers")
library("geoR")
library("sf")
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=";")
limite_interp <- st_read("Talhao_Interpolacao.shp")
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Analise exploratoria dos dados #
summary(geoadata)
plot(geoadata)
#Criando o variograma empírico #
variog_empir=variog(geoadata, estimator.type='modulus', trend='cte')
#Plotando o variograma empírico #
plot(variog_empir)
#Ajustando o semivariograma com diferentes funções de correlação
variog.wls.linear=variofit(variog_empir,cov.model="linear",weights="cressie")
variog.wls.exp=variofit(variog_empir,cov.model="exponential",weights="cressie")
variog.wls.spherical=variofit(variog_empir,cov.model="spherical",weights="cressie")
variog.wls.gaussian=variofit(variog_empir,cov.model="gaussian",weights="cressie")
variog.wls.cubic=variofit(variog_empir,cov.model="cubic",weights="cressie")
variog.wls.circular=variofit(variog_empir,cov.model="circular",weights="cressie")
##Plotando os modelos no variograma #
plot(variog_empir)
lines(variog.wls.cubic)
#Determinando modelo com menor SSE #
lista_modelos <-list(variog.wls.spherical$cov.model, variog.wls.linear$cov.model,variog.wls.gaussian$cov.model,
variog.wls.exp$cov.model,variog.wls.cubic$cov.model,variog.wls.circular$cov.model)
lista_sse <-list(variog.wls.exp$value,variog.wls.spherical$value,variog.wls.gaussian$value,variog.wls.linear$value,
variog.wls.cubic$value,variog.wls.circular$value)
model_erros <- do.call(rbind,Map(data.frame,Mod=lista_modelos,SSE=lista_sse))
min_sse <- min(model_errors$SSE)
model <- model_errors[which(model_errors$SSE==min_sse),1]
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
#Plotando os modelos no variograma #
plot(variog_empir)
lines(variog_ajust)
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
model <- model_errors[which(model_errors$SSE==min_sse),1]
model <- model_errors[which(model_erros$SSE==min_sse),1]
model <- model_erros[which(model_erros$SSE==min_sse),1]
min_sse <- min(model_erros$SSE)
model <- model_erros[which(model_erros$SSE==min_sse),1]
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
#Plotando os modelos no variograma #
plot(variog_empir)
lines(variog_ajust)
#Ajustando o variograma com menor SSE #
valid_cruz <- xvalid(geoadata, model = variog_ajust)
plot(valid_cruz)
grid_krig <- st_make_grid(limite_interp, cellsize = 1, what = "centers")
grid_krig <- st_intersection(grid_krig,limite_interp)
grid_krig <- matrix(unlist(grid_krig),nrow=length(grid_krig), byrow = T)
# Realizando a krigagem #
krig_control <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
pH_plot <- krige.conv(geoadata, loc=grid_krig, krige=krig_control)
# Salvando resultados da krigagem em um DF #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
#convert to spatial data frame
coordinates(pH_plot)=~x+y
library("sp")
#convert to spatial data frame
coordinates(pH_plot)=~x+y
library("geoR")
library("sf")
library("sp")
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=";")
limite_interp <- st_read("Talhao_Interpolacao.shp")
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Analise exploratoria dos dados #
summary(geoadata)
plot(geoadata)
#Criando o variograma empírico #
variog_empir=variog(geoadata, estimator.type='modulus', trend='cte')
#Plotando o variograma empírico #
plot(variog_empir)
#Ajustando o semivariograma com diferentes funções de correlação
variog.wls.linear=variofit(variog_empir,cov.model="linear",weights="cressie")
variog.wls.exp=variofit(variog_empir,cov.model="exponential",weights="cressie")
variog.wls.spherical=variofit(variog_empir,cov.model="spherical",weights="cressie")
variog.wls.gaussian=variofit(variog_empir,cov.model="gaussian",weights="cressie")
variog.wls.cubic=variofit(variog_empir,cov.model="cubic",weights="cressie")
variog.wls.circular=variofit(variog_empir,cov.model="circular",weights="cressie")
##Plotando os modelos no variograma #
plot(variog_empir)
lines(variog.wls.cubic)
#Determinando modelo com menor SSE #
lista_modelos <-list(variog.wls.spherical$cov.model, variog.wls.linear$cov.model,variog.wls.gaussian$cov.model,
variog.wls.exp$cov.model,variog.wls.cubic$cov.model,variog.wls.circular$cov.model)
lista_sse <-list(variog.wls.exp$value,variog.wls.spherical$value,variog.wls.gaussian$value,variog.wls.linear$value,
variog.wls.cubic$value,variog.wls.circular$value)
model_erros <- do.call(rbind,Map(data.frame,Mod=lista_modelos,SSE=lista_sse))
min_sse <- min(model_erros$SSE)
model <- model_erros[which(model_erros$SSE==min_sse),1]
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
#Plotando os modelos no variograma #
plot(variog_empir)
lines(variog_ajust)
#Ajustando o variograma com menor SSE #
valid_cruz <- xvalid(geoadata, model = variog_ajust)
plot(valid_cruz)
# Salvando resultados da krigagem em um DF #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
#convert to spatial data frame
coordinates(pH_plot)=~x+y
pH_plot <- krige.conv(geoadata, loc=grid_krig, krige=krig_control)
# Criando pontos para krigagem #
grid_krig <- st_make_grid(limite_interp, cellsize = 1, what = "centers")
grid_krig <- st_intersection(grid_krig,limite_interp)
grid_krig <- matrix(unlist(grid_krig),nrow=length(grid_krig), byrow = T)
krig_control <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
pH_plot <- krige.conv(geoadata, loc=grid_krig, krige=krig_control)
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
#convert to spatial data frame
coordinates(pH_plot) <- ~x+y
#convert to a raster
pH_plot <- rasterFromXYZ(pH_plot)
#convert to a raster
pH_plot <- rasterFromXYZ(pH_plot)
library("raster")
crs(pH_plot)<- "+init=epsg:31984"
#Plotando o resultado
image(pH_plot, asp=1, xlab="Northing", ylab="Easting", main="pH", legend.only = T)
#Plotando o resultado
image(pH_plot, asp=1, xlab="Northing", ylab="Easting", main="pH", legend.only = T)
image(pH_plot, asp=1, xlab="Northing", ylab="Easting", main="pH", legend.only = T)
# Convertendo em raster e definindo a projeção
pH_plot <- rasterFromXYZ(pH_plot)
crs(pH_plot)<- "+init=epsg:31984"
#Plotando o resultado
image(pH_plot, asp=1, xlab="Northing", ylab="Easting", main="pH", legend.only = T)
image.plot( legend.only = T, breaks=sl, lab.breaks=sll)
contour(pH_plot, add=T)
# Adicionando imagem da área #
rgb_image <- raster("Orto_Talhao_Interpol.tif")
warnings()
View(dados_amostra)
View(grid_krig)
#Plotando o resultado #
image(pH_plot, asp=1, xlab="Easting", ylab="Northing", main="pH", legend.only = T)
image.plot( legend.only = T, breaks=sl, lab.breaks=sll)
contour(pH_plot, add=T)
par(xpd=FALSE, bty="l")
pal <-colorRampPalette(c("red","yellow", "green"))
plot(pH_plot, main="pH",xlab="Easting", ylab="Northing", cex=1.5, col= pal(10) )
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="pH",xlab="Easting (m)", ylab="Northing (m)")
rgb_image=readGDAL(rgb_image)
library("rgdal")
rgb_image=readGDAL(rgb_image)
rgb_image=readGDAL(rgb_image)
rgb_image=brick("Orto_Talhao_Interpol.tif")
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="pH",xlab="Easting (m)", ylab="Northing (m)")
rgb_image <- brick("Orto_Talhao_Interpol.tif")
plot(pH_plot, main="pH",xlab="Easting", ylab="Northing", cex=1.5, col= pal(10) )
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="pH",xlab="Easting (m)", ylab="Northing (m)")
plot(pH_plot, add=T, main="pH",xlab="Easting", ylab="Northing", legend=T, cex=1.5, alpha=0.75)
grid(lty=1)
par(xpd=TRUE)
#add contours to the map
contour(pH_plot, add=T, col="white")
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.5 |pH_shape@data@values  <6]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
pH_shape=rasterToPolygons(pH_shape, dissolve=TRUE)
library("rgeos")
pH_shape=rasterToPolygons(pH_shape, dissolve=TRUE)
pH_shape=rasterToPolygons(pH_shape, dissolve=TRUE)
pH_shape=rasterToPolygons(pH_shape, dissolve=TRUE)
plot(pH_shape)
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.5 |pH_shape@data@values  <6]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
#convert the raster to polygons
pH_shape=rasterToPolygons(pH_shape, dissolve=TRUE)
library("rgeos")
rgeos
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.5 |pH_shape@data@values  <6]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
pH_shape=rasterToPolygons(pH_shape)
spplot(pH_shape)
pH_shape <- pH_plot
#set values in raster to classes
#in this case we are splitting the raster into values greater or less than 10
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.5 |pH_shape@data@values  <6]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
#convert the raster to polygons
plot(pH_shape)
pH_shape <- pH_plot
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.8 |pH_shape@data@values  <6]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
plot(pH_shape)
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.8 ]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.5  ]=1
pH_shape@data@values[pH_shape@data@values >=5.8 ]=2
pH_shape@data@values[pH_shape@data@values >=6]=3
plot(pH_shape)
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.3  ]=1
pH_shape@data@values[pH_shape@data@values >=5.6 ]=2
pH_shape@data@values[pH_shape@data@values >=5.8]=3
plot(pH_shape)
library("geoR")
library("sf")
library("sp")
library("raster")
library("rgeos")
library("rgdal")
# Carregando os dados_amostra #
dados_amostra <- read.table('AAA.csv', h=T, sep=";")
limite_interp <- st_read("Talhao_Interpolacao.shp")
# Criando o arquivo geodata #
geoadata <- as.geodata(dados_amostra, coords.col=2:3, data.col=4)
#Análise exploratoria dos dados #
summary(geoadata)
plot(geoadata)
#Criando o variograma empírico #
variog_empir=variog(geoadata, estimator.type='modulus', trend='cte')
#Plotando o variograma empírico #
plot(variog_empir)
#Ajustando o semivariograma com diferentes funções de correlação
variog.wls.linear=variofit(variog_empir,cov.model="linear",weights="cressie")
variog.wls.exp=variofit(variog_empir,cov.model="exponential",weights="cressie")
variog.wls.spherical=variofit(variog_empir,cov.model="spherical",weights="cressie")
variog.wls.gaussian=variofit(variog_empir,cov.model="gaussian",weights="cressie")
variog.wls.cubic=variofit(variog_empir,cov.model="cubic",weights="cressie")
variog.wls.circular=variofit(variog_empir,cov.model="circular",weights="cressie")
#Plotando os modelos no variograma #
plot(variog_empir)
lines(variog.wls.cubic)
#Determinando modelo com menor SSE #
lista_modelos <-list(variog.wls.spherical$cov.model, variog.wls.linear$cov.model,variog.wls.gaussian$cov.model,
variog.wls.exp$cov.model,variog.wls.cubic$cov.model,variog.wls.circular$cov.model)
lista_sse <-list(variog.wls.exp$value,variog.wls.spherical$value,variog.wls.gaussian$value,variog.wls.linear$value,
variog.wls.cubic$value,variog.wls.circular$value)
model_erros <- do.call(rbind,Map(data.frame,Mod=lista_modelos,SSE=lista_sse))
min_sse <- min(model_erros$SSE)
model <- model_erros[which(model_erros$SSE==min_sse),1]
#Ajustando o variograma com menor SSE #
variog_ajust <- variofit(variog_empir,cov.model=toString(model),weights="cressie")
#Plotando os modelos no variograma #
plot(variog_empir)
lines(variog_ajust)
#Ajustando o variograma com menor SSE #
valid_cruz <- xvalid(geoadata, model = variog_ajust)
plot(valid_cruz)
# Criando pontos para krigagem #
grid_krig <- st_make_grid(limite_interp, cellsize = 1, what = "centers")
grid_krig <- st_intersection(grid_krig,limite_interp)
grid_krig <- matrix(unlist(grid_krig),nrow=length(grid_krig), byrow = T)
# Realizando a krigagem #
krig_control <- krige.control(cov.model=toString(model),cov.pars=c(variog_ajust$cov.pars[1], variog_ajust$cov.pars[2]))
pH_plot <- krige.conv(geoadata, loc=grid_krig, krige=krig_control)
# Salvando resultados da krigagem em um spatial data frame #
pH_plot <- data.frame(cbind(pH_plot$predict, grid_krig[,1], grid_krig[,2]))
colnames(pH_plot)=c("pH", "x", "y")
coordinates(pH_plot) <- ~x+y
# Convertendo em raster e definindo a projeção #
pH_plot <- rasterFromXYZ(pH_plot)
crs(pH_plot)<- "+init=epsg:31984"
#Plotando o resultado #
image(pH_plot, asp=1, xlab="Easting", ylab="Northing", main="pH", legend.only = T)
image.plot( legend.only = T, breaks=sl, lab.breaks=sll)
contour(pH_plot, add=T)
# Adicionando imagem da área #
rgb_image <- brick("Orto_Talhao_Interpol.tif")
# Convertendo o raster em shapefile #
pH_shape <- pH_plot
pH_shape@data@values[pH_shape@data@values <5.8  ]=1
pH_shape@data@values[pH_shape@data@values >=5.8]=2
pH_shape <- rasterToPolygons(pH_shape, dissolve=TRUE)
spplot(pH_shape,xlab="Easting", ylab="Northing", main="pH", legend.only = T,gridded=T, asp=1)
#Criando plotagem final #
jpeg(filename = "pH_plot.jpg", width = 1000, height = 727)
par(xpd=FALSE, bty="l")
pal <-colorRampPalette(c("red","yellow", "green"))
plot(pH_plot, main="pH",xlab="Easting", ylab="Northing", cex=1.5, col= pal(10) )
plotRGB(rgb_image, add=T, stretch="lin", colNA='white', main="pH",xlab="Easting (m)", ylab="Northing (m)")
plot(pH_plot, add=T, main="pH",xlab="Easting", ylab="Northing", legend=T, cex=1.5, alpha=0.75)
grid(lty=1)
par(xpd=TRUE)
contour(pH_plot, add=T, col="white")
dev.off()
# Exportando resultados #
writeRaster(pH_plot, "pH_plot.tiff", format="GTiff")
writeOGR(pH_shape, dsn= getwd(),layer = "pH_shape", driver = 'ESRI Shapefile')
# Exportando resultados #
writeRaster(pH_plot, "pH_plot.tiff", format="GTiff")
writeOGR(pH_shape, dsn= getwd(),layer = "pH_shape", driver = 'ESRI Shapefile')
